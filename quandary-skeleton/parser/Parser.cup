package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

:};

terminal INT, CELL, QTYPE, MUTABLE, NIL,
         IF, ELSE, WHILE, RETURN,
         SEMICOLON, COMMA, LPAREN, RPAREN, BEGIN, END,
         ASSIGN, PLUS, MINUS, UMINUS, TIMES, DOT,
         LE, GE, EQ, NE, LT, GT, AND, OR, NOT;
terminal Long    INTCONST;
terminal String  IDENT;

non terminal Program         program;
non terminal List<FuncDef>   funcDefList;
non terminal FuncDef         funcDef;
non terminal VarDecl         varDecl;
non terminal Type            type;
non terminal List<VarDecl>   formalDeclList;
non terminal List<VarDecl>   neFormalDeclList;
non terminal List<Stmt>      stmtList;
non terminal Stmt            stmt;
non terminal List<Expr>      exprList;
non terminal List<Expr>      neExprList;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal Cond            cond;

precedence left DOT;
precedence left PLUS, MINUS, AND, OR;
precedence left TIMES;
precedence left UMINUS, NOT;

precedence left ELSE; // resolves dangling else

start with program;

program ::= funcDefList:l
    {: RESULT = new Program(l); :}
    ;

funcDefList ::= funcDef:d funcDefList:l
    {: l.add(0, d); RESULT = l; :}
    | /* empty list */
    {: RESULT = new LinkedList<FuncDef>(); :}
    ;

funcDef ::= varDecl:d LPAREN formalDeclList:dl RPAREN BEGIN stmtList:sl END
    {: RESULT = new FuncDef(d, dl, sl); :}
    ;

varDecl ::= type:t IDENT:i
    {: RESULT = new VarDecl(false, t, i); :}
    | MUTABLE type:t IDENT:i
    {: RESULT = new VarDecl(true, t, i); :}
    ;

type ::= INT
    {: RESULT = Type.INT; :}
    | CELL
    {: RESULT = Type.CELL; :}
    | QTYPE
    {: RESULT = Type.QTYPE; :}
    ;

formalDeclList ::= neFormalDeclList:l
    {: RESULT = l; :}
    | /* empty list */
    {: RESULT = new LinkedList<VarDecl>(); :}
    ;

neFormalDeclList ::= varDecl:d COMMA neFormalDeclList:l
    {: l.add(0, d); RESULT = l; :}
    | varDecl:d
    {: RESULT = new LinkedList<VarDecl>(Arrays.asList(d)); :}
    ;

stmtList ::= stmt:s stmtList:l
    {: l.add(0, s); RESULT = l; :}
    | /* empty list */
    {: RESULT = new LinkedList<Stmt>(); :}
    ;

stmt ::= varDecl:d ASSIGN expr:e SEMICOLON
    {: RESULT = new DeclStmt(d, e); :}
    | IDENT:i ASSIGN expr:e SEMICOLON
    {: RESULT = new AssignStmt(i, e); :}
    | IF LPAREN cond:e RPAREN stmt:s
    {: RESULT = new IfStmt(e, s); :}
    | IF LPAREN cond:e RPAREN stmt:s1 ELSE stmt:s2
    {: RESULT = new IfStmt(e, s1, s2); :}
    | WHILE LPAREN cond:e RPAREN stmt:s
    {: RESULT = new WhileStmt(e, s); :}
    | RETURN expr:e SEMICOLON
    {: RESULT = new ReturnStmt(e); :}
    | BEGIN stmtList:l END
    {: RESULT = new CompoundStmt(l); :}
    ;

exprList ::= neExprList:l
    {: RESULT = l; :}
    | /* empty list */
    {: RESULT = new LinkedList<Expr>(); :}
    ;

neExprList ::= expr:e COMMA neExprList:l
    {: l.add(0, e); RESULT = l; :}
    | expr:e
    {: RESULT = new LinkedList<Expr>(Arrays.asList(e)); :}
    ;

expr ::= NIL
    {: RESULT = new ConstExpr(); :}
    | INTCONST:c
    {: RESULT = new ConstExpr(c); :}
    | IDENT:i
    {: RESULT = new IdentExpr(i); :}
    | MINUS expr:e
    {: RESULT = new UnaryMinusExpr(e); :}
    %prec UMINUS
    | LPAREN type:t RPAREN expr:e
    {: RESULT = new CastExpr(t, e); :}
    %prec UMINUS
    | IDENT:i LPAREN exprList:l RPAREN
    {: RESULT = new CallExpr(i, l); :}
    | binaryExpr:e
    {: RESULT = e; :}
    | LPAREN expr:e RPAREN
    {: RESULT = e; :}
    ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2); :}
            |  expr:e1 DOT expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.DOT, e2); :}
            ;

cond ::= expr:e1 LE expr:e2
    {: RESULT = new CompCond(e1, CompCond.LE, e2); :}
    | expr:e1 GE expr:e2
    {: RESULT = new CompCond(e1, CompCond.GE, e2); :}
    | expr:e1 EQ expr:e2
    {: RESULT = new CompCond(e1, CompCond.EQ, e2); :}
    | expr:e1 NE expr:e2
    {: RESULT = new CompCond(e1, CompCond.NE, e2); :}
    | expr:e1 LT expr:e2
    {: RESULT = new CompCond(e1, CompCond.LT, e2); :}
    | expr:e1 GT expr:e2
    {: RESULT = new CompCond(e1, CompCond.GT, e2); :}
    | cond:e1 AND cond:e2
    {: RESULT = new LogicalCond(e1, LogicalCond.AND, e2); :}
    | cond:e1 OR cond:e2
    {: RESULT = new LogicalCond(e1, LogicalCond.OR, e2); :}
    | NOT cond:e
    {: RESULT = new NotExpr(e); :}
    | LPAREN cond: e RPAREN
    {: RESULT = e; :}
    ;
